// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');
var proof = require("../../zokrates/code/square/proof.json");

contract('TestSquareVerifier', accounts => {
    let owner = accounts[0];

    describe('Test verification', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({from: owner});
        })

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('Verification with correct proof', async function () {
            let result = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b,proof.proof.c,proof.inputs);
            assert.equal(result, true, "Contract should be verified");

        });

        // Test verification with incorrect proof
        it('Verification with incorrect proof', async function () {
            let incorrectProof = Object.assign({}, proof);
            incorrectProof["inputs"] = ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000002"]

            let result = await this.contract.verifyTx.call(incorrectProof.proof.a, incorrectProof.proof.b, incorrectProof.proof.c, incorrectProof.inputs);
            assert.equal(result, false,"Verification should fail");
        });
    })
})
